---
title: Polished figures for CHI26 paper
format: 
  html:
    code-fold: true
    toc: true
  # revealjs:
  #   scrollable: true
  #   toc: true     # this adds a TOC slide at the beginning
execute:
  cache: true
  echo: true
---

```{r}
#| label: setup
#| include: false
#| echo: true
library(ggplot2)
library(tsibbledata)
library(dplyr)
library(lubridate)
library(tsibble)
library(ggtime)
library(patchwork)
theme_set(theme_minimal() + 
  theme(
    strip.background = element_rect(fill = "grey90", colour = "black"),
    panel.background = element_rect(fill = "white", colour = "black")
  ))

uad <- as_tsibble(USAccDeaths) |> 
  as_tibble() |> 
  mutate(index = as.Date(index))

bank_calls <- fpp3::bank_calls

pedestrian <- tsibble::pedestrian |>
  tsibble::fill_gaps() |>
  mutate(Date = as.Date(strftime(Date_Time, "%Y-%m-%d"))) |>
  arrange(Sensor, Date_Time)

# Fudge the data to correctly handle DST changes
# Since the data was provided in civil time, the 2AM counts before/after DST are combined.
pedestrian[53763, "Count"] <- 9
pedestrian[53764, "Count"] <- 5

sunspots <- as_tibble(as_tsibble(sunspot.year)) |> 
  transmute(
    Year = mixtime::year(index-1970L),
    Sunspots = value
  )
```



```{r}
#| label: implicit-missing
bank_calls |> 
  filter(DateTime < ymd_hms("2003-03-15 00:00:00")) |>
  ggplot(aes(x = DateTime, y = Calls)) +
  geom_line() + 
  labs(x = NULL, y = "The 5-minute call volume of a bank") 
```


```{r}
#| label: ragged-polar
is_peak <- function(window) {
  center <- ceiling(length(window) / 2)
  which.max(window) == center
}
sunspot_peaks <- sunspots |> 
  dplyr::filter(
    slider::slide_lgl(
      .x = Sunspots, .f = is_peak,
      .before = 2,.after = 2,
      .complete = TRUE
    )
  )

sunspots |> 
  ggplot(aes(x = Year, y = Sunspots)) +
  geom_time_line() +
  geom_point(data = sunspot_peaks, color = "red", size = 2) +
  scale_x_mixtime(warps = sunspot_peaks$Year) + 
  coord_loop(loops = sunspot_peaks$Year)
```


```{r}
#| label: pedestrian-dst-polar-icons
#| fig-width: 1
#| fig-height: 0.6

icon_theme <- list(
  theme_void(), 
  theme(
    plot.background = element_rect(colour = "black", fill = "grey85"),
    strip.background = element_rect(fill = "grey70", colour = "black")
  )
)

(pedestrian |> 
  filter(Sensor == "Southern Cross Station") |> 
  filter(Date >= ymd("2016-10-03") & Date <= ymd("2016-10-09")) |> 
  ggplot(aes(x = Date_Time, y = Count)) +
  geom_line() + 
  labs(x = NULL, y = NULL) + 
  icon_theme) |> 
  ggsave(
    "graphics/navigation-subfig/pedestrian-cartesian.svg", plot = _, width = 2, height = 2, units = "cm"
  )

(pedestrian |> 
  filter(Sensor == "Southern Cross Station") |> 
  filter(Date >= ymd("2016-10-03") & Date <= ymd("2016-10-09")) |> 
  ggplot(aes(x = hour(Date_Time), group = Date, y = Count)) +
  geom_line() + 
  labs(x = NULL, y = NULL) + 
  icon_theme) |> 
  ggsave(
    "graphics/navigation-subfig/pedestrian-ggplot-loop.svg", plot = _, width = 2, height = 2, units = "cm"
  )

(pedestrian |> 
  filter(Sensor == "Southern Cross Station") |> 
  filter(Date >= ymd("2016-10-03") & Date <= ymd("2016-10-16")) |> 
  ggplot(aes(x = Date_Time, y = Count)) +
  geom_line() + 
  facet_wrap(
    vars(floor_date(Date_Time, "1 week", week_start = 1L)),
    ncol = 1L,
    scales = "free_x"
  ) +
  labs(x = NULL, y = NULL) + 
  icon_theme) |> 
  ggsave(
    "graphics/navigation-subfig/pedestrian-ggplot-calendar.svg", plot = _, width = 2, height = 2, units = "cm"
  )

# tz forced because we're using lubridate::floor_date for now which ignores tz
# this is fixed in mixtime
(tsibble::pedestrian |> 
  filter(Sensor == "Southern Cross Station") |> 
  filter(Date >= ymd("2016-10-03") & Date <= ymd("2016-10-09")) |> 
  ggplot(aes(x = force_tz(Date_Time, "UTC"), y = Count)) +
  geom_line() + 
  coord_loop(time_loops = "1 day") +
  labs(x = NULL, y = NULL) + 
  icon_theme) |> 
  ggsave(
    "graphics/navigation-subfig/pedestrian-ggtime-loop.svg", plot = _, width = 2, height = 2, units = "cm"
  )

(tsibble::pedestrian |> 
  filter(Sensor == "Southern Cross Station") |> 
  filter(Date >= ymd("2016-10-03") & Date <= ymd("2016-10-16")) |> 
  ggplot(aes(x = force_tz(Date_Time, "UTC"), y = Count)) +
  geom_line() + 
  coord_calendar(time_rows = "1 week") +
  labs(x = NULL, y = NULL) + 
  icon_theme) |> 
  ggsave(
    "graphics/navigation-subfig/pedestrian-ggtime-calendar.svg", plot = _, width = 2, height = 2, units = "cm"
  )
# Melbourne DST ends in 2016 on october 2
```

Coord polar with ragged cycles

```{r}
#| label: sunspots-polar
tsbl_sunspot <- as_tsibble(sunspot.year) 
tsbl_sunspot_peak <- tsbl_sunspot |> 
  filter(
    slider::slide_lgl(
      .x = -value, .f = is_peak,
      .before = 2,.after = 2,
      .complete = TRUE
    )
  )

(tsbl_sunspot |> 
  ggplot(aes(x = index, y = value)) +
  geom_line() +
  # geom_point(data = tsbl_sunspot_peak, color = "red", size = 2) +
  coord_loop(
    loops = tsbl_sunspot_peak$index, expand = c(TRUE, FALSE),
    coord = coord_radial()
  ) + 
  scale_x_continuous(n.breaks = 8, labels = function(x) paste0("Y", x - 1711)) + 
  labs(x = NULL, y = "Annual Sunspot Counts")) |> 
  ggsave("plots/plot-sunspots-polar.png", plot = _, width = 4, height = 4, units = "cm")
```


```{r}
p <- tsibble::pedestrian |>
  dplyr::filter(Date < "2015-02-01") |>
  mutate(
    Sensor = factor(Sensor, levels = c("Southern Cross Station", "Birrarung Marr", "QV Market-Elizabeth St (West)"), labels = c("Southern Cross Station", "Birrarung Marr", "QV Market"))
  ) |> 
  ggplot(aes(x = Date_Time, y = Count, color = Sensor)) +
  geom_line() +
  coord_calendar(time_rows = "1 week") +
  scale_x_datetime(date_breaks = "1 day", date_labels = "%a") +
  scale_y_continuous(breaks = NULL) +
  facet_grid(cols=vars(yearmonth(Date))) +
  theme(
    strip.background = element_rect(fill = "grey90", colour = "black"),
    panel.background = element_rect(fill = "white", colour = "black")
  ) +
  labs(x = NULL, y = "Hourly pedestrian counts", colour = NULL) +
  theme(legend.position = "bottom")

ggsave("plots/plot-pedestrian-calendar.png", plot = p, width = 12, height = 8, units = "cm")
```


```{r}
p <- aus_production |> 
  filter(year(Quarter) >= 1991) |>
  ggtime::gg_subseries(Beer) + 
  theme(
    strip.background = element_rect(fill = "grey90", colour = "black"),
    panel.background = element_rect(fill = "white", colour = "black")
  )
p
ggsave("plots/plot-seasonal-subseries.png", plot = p, width = 12, height = 8, units = "cm")
```


```{r}
library(fable)
uad <- as_tsibble(USAccDeaths) 
p <- uad |> 
  model(
    ETS = ETS(value),
  ) |>
  forecast(h = "3 years") |>
  autoplot(uad) + 
  theme(legend.position = "none") + 
  labs(x = NULL, y = "Monthly US accidental deaths") + 
  scale_x_yearmonth(date_labels = "%Y", date_breaks = "2 year")
p

ggsave("plots/plot-forecast.png", plot = p, width = 12, height = 8, units = "cm")
```


NYT usage scenario figure

```{r}
#| label: nyt-floyd
#| code-fold: true
#| message: false
#| fig-width: 12
#| fig-height: 6
library(ggplot2)
library(dplyr)

col_homicide <- "#FB8C58"
col_police_killings <- "#980000"

nyt_floyd_plot_common <- function(p, xoffset = 0) {
  p +   
  # Add vertical line for George Floyd's death (assuming 2020)
  geom_vline(xintercept = 2020.3686, linetype = "dashed", color = "gray60", linewidth = 0.8) +
  
  # Custom colors to match the reference
  scale_color_manual(values = c("Homicides" = col_homicide, "Police killings" = col_police_killings)) +
  
  # Format y-axis as years
  scale_x_continuous(
    breaks = 2015:2024 + xoffset, labels = \(x) format(floor(x)),
    expand = c(0, 0.2)
  ) +

  # Format y-axis as percentages
  scale_y_continuous(
    breaks = seq(-10, 50, 10), labels = scales::label_percent(scale = 1),
    limits = c(-10, 50), expand = c(0, 0)
  ) +

  # Customize theme
  theme_minimal() +
  theme(
    # Remove legend
    legend.position = "none",
    
    # Grid lines
    panel.grid.major.x = element_blank(),
    panel.grid.minor = element_blank(),
    panel.grid.major.y = element_line(color = "gray90", size = 0.5),
    
    # Axis styling
    axis.line.x = element_line(color = "black", size = 0.8),
    axis.text = element_text(color = "gray30", size = 10),
    axis.title = element_blank(),
    axis.ticks.x = element_line(color = "gray30"),
    axis.ticks.y = element_blank(),
    
    # Plot styling
    plot.title = element_text(size = 16, face = "bold", margin = margin(b = 5)),
    plot.subtitle = element_text(size = 12, color = "gray50", margin = margin(b = 20)),
    plot.caption = element_text(size = 9, color = "gray50", hjust = 0, margin = margin(t = 20)),
    plot.background = element_rect(fill = "white", color = NA),
    panel.background = element_rect(fill = "white", color = NA)
  ) +
  
  # Add labels
  labs(
    title = "Police killings continued to rise as other homicides fell",
    subtitle = "Percent change in homicides and police killings since 2015"#,
    # caption = "Sources: Analysis of data compiled by The Washington Post and Mapping Police Violence. Homicide data from the\nCenters for Disease Control and Prevention. â€” The New York Times"
  ) +
  
  # Add shaded region for the year 2020
  annotate("rect", xmin = 2020, xmax = 2021, 
           ymin = -Inf, ymax = Inf, fill = "grey80", alpha = 0.3) +

  # Expand x-axis to make room for labels
  coord_cartesian(clip = "off")
}

p1 <- (readr::read_csv("src/chi26-figures/nyt-floyd.csv") |> 
  ggplot(aes(x = year, y = percent_change, colour = type)) +
  geom_line(linewidth = 1.2) +
  geom_point(size = 2.5)) |> 
  nyt_floyd_plot_common() + 
  # Add annotation for George Floyd's death
  annotate(
    "label", x = 2020.3686, y = 50, label = "Death of George Floyd\nMay 25, 2020", 
     hjust = 0.5, vjust = 0.3, size = 4, color = "gray30", fill = "white", border.colour = "white"
  ) +
  # Add direct labels for the lines
  annotate(
    "text", x = 2022.3, y = 39, label = "Homicides", 
    color = col_homicide, size = 4, hjust = 0, fontface = "bold"
  ) +
  
  annotate(
    "text", x = 2022.3, y = 6, label = "Police killings", 
    color = col_police_killings, size = 4, hjust = 0, fontface = "bold"
  )
  
p1

p2 <- (readr::read_csv("src/chi26-figures/nyt-floyd.csv") |> 
  ggplot(aes(x = year, y = percent_change, colour = type)) +
  geom_step(linewidth = 1.2)) |> 
  nyt_floyd_plot_common() + 
  labs(title = NULL, subtitle = NULL) + 
  # Add annotation for George Floyd's death
  annotate(
    "label", x = 2017.7, y = 40, label = "Death of George Floyd\nMay 25, 2020", 
     hjust = 0.5, vjust = 0.3, size = 4, color = "gray30", fill = "#ffffff99", border.colour = "transparent"
  ) +
  # Add direct labels for the lines
  annotate(
    "text", x = 2022.2 , y = 43, label = "Homicides", 
    color = col_homicide, size = 4, hjust = 0, fontface = "bold"
  ) +
  
  annotate(
    "text", x = 2021.5, y = 0, label = "Police killings", 
    color = col_police_killings, size = 4, hjust = 0, fontface = "bold"
  )
p2

p3 <- (readr::read_csv("src/chi26-figures/nyt-floyd.csv") |> 
  ggplot(aes(x = year + 0.5, y = percent_change, colour = type)) +
  geom_line(linewidth = 1.2) +
  geom_point(size = 2.5)) |> 
  nyt_floyd_plot_common(xoffset = 0.5) + 
  labs(title = NULL, subtitle = NULL) +
  # Add annotation for George Floyd's death
  annotate(
    "label", x = 2017.7, y = 40, label = "Death of George Floyd\nMay 25, 2020", 
     hjust = 0.5, vjust = 0.3, size = 4, color = "gray30", fill = "#ffffff99", border.colour = "transparent"
  ) +
  # Add direct labels for the lines
  annotate(
    "text", x = 2022.7 , y = 43, label = "Homicides", 
    color = col_homicide, size = 4, hjust = 0, fontface = "bold"
  ) +
  
  annotate(
    "text", x = 2022, y = 0, label = "Police killings", 
    color = col_police_killings, size = 4, hjust = 0, fontface = "bold"
  )
p3

ggsave("plots/nyt-subfig/plot-nyt-floyd-original.svg", plot = p1, width = 8, height = 3, units = "in")
ggsave("plots/nyt-subfig/plot-nyt-floyd-step.svg", plot = p2, width = 4, height = 3, units = "in")
ggsave("plots/nyt-subfig/plot-nyt-floyd-align.svg", plot = p3, width = 4, height = 3, units = "in")
```


```{r}
#| label: sawtooth-group
# Using the NYT Floyd data to show sawtooth effect by missing the group by type
p <- readr::read_csv("src/chi26-figures/nyt-floyd.csv") |> 
  ggplot(aes(x = year, y = percent_change)) +
  geom_line(linewidth = 1.2) +
  geom_point(size = 2.5) + 
  scale_x_continuous(breaks = 2015:2024, labels = function(x) scales::number(floor(x))) +
  labs(x = "Year", y = "Percent change since 2015")
ggsave("plots/plot-sawtooth-group.png", plot = p, width = 12, height = 8, units = "cm")
```


```{r}
#| label: sawtooth-duplicate

aus_pop <- global_economy |> 
  filter(Country %in% c("Australia")) |> 
  select(Year, Country, Population) |> 
  as_tibble() |> 
  filter(Year >= 2000)
aus_pop <- bind_rows(aus_pop, aus_pop[11,])

aus_pop[19,]$Population <- aus_pop[19,]$Population*1.03

p <- aus_pop |> 
  ggplot(aes(x = Year, y = Population)) +
  geom_line(linewidth = 1.2) +
  scale_x_continuous(n.breaks = 6) +
  scale_y_continuous(labels = scales::number_format(accuracy = 1, scale = 1e-6, suffix = "m")) +
  labs(x = "Year", y = "Australian population (millions)") 
ggsave("plots/plot-sawtooth-duplicate.png", plot = p, width = 12, height = 8, units = "cm")
```

Daylight savings civil line slopes

```{r}
#| label: dst-civil
tz_shift <- as_tibble(tsibbledata::gafa_stock) |>
  filter(
    (Symbol == "AAPL" & Date <= "2014-01-15") | 
      (Symbol == "GOOG" & Date <= "2014-01-13")
  ) |>
  mutate(Date = Sys.Date() + hours(c(1:3, 3:9, 1:2, 4:9)), DST = ifelse(Symbol == "AAPL", "DST Ends", "DST Begins")) |> 
  slice(1:3, 3:12, 12:n()) |> 
  mutate(
    open = duplicated(Open),
    closed = c(open[-1], FALSE),
    Date = Date + open*3600*((DST=="DST Begins")*2-1)
  )

ggplot2_civil <- tz_shift |> 
  ggplot(aes(x = Date, y = Close)) + 
  geom_path(data = filter(tz_shift, !open)) +
  facet_wrap(vars(DST), ncol = 2, scales = "free_y") + 
  scale_shape_manual(values = c("TRUE" = 16, "FALSE" = 1)) + 
  guides(shape = "none")

ggtime_civil <- tz_shift |> 
  ggplot(aes(x = Date, y = Close)) + 
  geom_path(aes(group = cumsum(open))) + 
  geom_path(linetype = "dashed", data = filter(tz_shift, open | closed)) +
  facet_wrap(vars(DST), ncol = 2, scales = "free_y") + 
  scale_shape_manual(values = c("TRUE" = 16, "FALSE" = 1)) + 
  guides(shape = "none")

```


```{r}
library(dplyr)
# Australia/Melbourne Daylight savings time changes 2025
dst_end_mel <- as.POSIXct("2025-04-06 03:00:00", tz = "Australia/Melbourne")
dst_start_mel <- as.POSIXct("2025-10-05 02:00:00", tz = "Australia/Melbourne")

dst_start <- tibble(
  time = dst_start_mel + 3600 * (-2:2),
  values = 1:5 + rnorm(5, sd = 0.3)
)
dst_end <- tibble(
  time = dst_end_mel + 3600 * (-4:1),
  values = 1:6 + rnorm(6, sd = 0.3)
)

dst_change <- bind_rows(
  `DST Starts` = dst_start,
  `DST Ends` = dst_end,
  .id = "DST"
) |>
  group_by(DST) |>
  mutate(reftime = lubridate::force_tz(time[1], "UTC") + 3600 * (1:n() - 1L))

dst_abs <- dst_change |>
  ggplot(aes(x = time, y = values)) +
  geom_line() +
  geom_line(
    data = dst_change[c(2:3, 8:9), ],
    colour = "red",
    linewidth = 1
  ) +
  geom_line(
    data = tibble(
      time = dst_start_mel + c(0, 3600 * 3),
      values = 3,
      DST = "DST Starts"
    ),
    colour = NA
  ) +
  facet_grid(
    rows = vars("Absolute Time\n(ggplot2::geom_line)"),
    cols = vars(DST),
    scales = "free_x"
  ) +
  scale_y_continuous(minor_breaks = NULL) +
  scale_x_datetime(minor_breaks = NULL, date_labels = "%I%p", date_breaks = "1 hour") +
  labs(x = NULL, y = NULL)
ggsave("graphics/dst-subfig/dst-absolute.svg", dst_abs, width = 6, height = 2)

dst_civil_ggtime <- dst_change |>
  ggplot(aes(x = time, y = values)) +
  geom_time_line() +
  geom_line(aes(x = reftime), colour = NA) +
  geom_time_line(
    data = dst_change[c(2:3, 8:9), ],
    colour = "red",
    linewidth = 1
  ) +
  facet_grid(
    rows = vars("Civil Time\n(ggtime::geom_time_line)"),
    cols = vars(DST),
    scales = "free_x"
  ) +
  scale_y_continuous(minor_breaks = NULL) +
  scale_x_datetime(minor_breaks = NULL, date_labels = "%I%p", date_breaks = "1 hour") +
  labs(x = NULL, y = NULL)
ggsave(
  "graphics/dst-subfig/dst-civil-ggtime.svg",
  dst_civil_ggtime,
  width = 6,
  height = 2
)

dst_civil_ggplot2 <- dst_change |>
  ggplot(aes(x = time, y = values)) +
  geom_line(position = position_time_civil()) +
  geom_line(aes(x = reftime), colour = NA) +
  geom_line(
    position = position_time_civil(),
    data = dst_change[c(2:3, 8:9), ],
    colour = "red",
    linewidth = 1
  ) +
  facet_grid(
    rows = vars("Civil Time\n(ggplot2::geom_line)"),
    cols = vars(DST),
    scales = "free_x"
  ) +
  scale_y_continuous(minor_breaks = NULL) +
  scale_x_datetime(minor_breaks = NULL, date_labels = "%I%p", date_breaks = "1 hour") +
  labs(x = NULL, y = NULL)
ggsave(
  "graphics/dst-subfig/dst-civil-ggplot2.svg",
  dst_civil_ggplot2,
  width = 6,
  height = 2
)

```